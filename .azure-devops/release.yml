# Manual trigger only
trigger: none
pr: none

parameters:
- name: variableGroup
  displayName: 'Pipeline variable group'
  type: string
  default: 'releaseVariables'
- name: buildAgentPoolVar
  displayName: 'Build agent pool'
  type: string
  default: 'BuildAgentPool'
- name: buildAgentVmImageVar
  displayName: 'Build agent image'
  type: string
  default: 'BuildAgentImage'
- name: ghRelease
  displayName: 'Draft github release'
  type: boolean
  default: false
- name: isPreRelease
  displayName: 'PreRelease / release candidate build'
  type: boolean
  default: false
- name: publishExt
  displayName: 'Publish Extension to Marketplace'
  type: boolean
  default: false

variables:
  - group: ${{ parameters.variableGroup }}

stages:
- stage: test
  jobs:
  - job: test
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)

    steps:
     # install nodejs
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: Install Node.js
      # Install dependencies and run tslint and test
    - script: |
        npm install
      displayName: Install dependencies
    - script: |
        npm run tslint
      displayName: TSLint
    - bash: |
        xvfb-run -a npm test
      displayName: Run Tests (Linux)
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    - script: |
        npm test
      displayName: Run Tests
      condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))

- stage: release
  pool:
    name: $[variables.${{ parameters.buildAgentPoolVar }}]
    vmImage: $[variables.${{ parameters.buildAgentVmImageVar }}]

  jobs:
  - job: release
    steps:
    # install nodejs and dependencies
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: Install Node.js
    
    - script: |
        npm install
      displayName: Install dependencies
    
    - script: |
        npm install -g vsce
      displayName: Install vsce
    
    # modify package.json for releases / release-candidates
    - script: |
        node scripts/modifyPackageJson.js name $(test_extension_name) displayName "$(test_display_name)" aiKey $ENV_AIKEY publisher $(test_publisher)
      displayName: Modify package.json for release candidates
      condition: and(succeeded(), eq(${{ parameters.isPreRelease }}, true), eq(${{ parameters.publishExt }}, false))
      env:
        ENV_AIKEY: $(TEST_AIKEY)
  
    - script: |
        node scripts/modifyPackageJson.js aiKey $ENV_AIKEY
      displayName: Modify package.json for releases
      condition: and(succeeded(), eq(${{ parameters.isPreRelease }}, false), eq(${{ parameters.publishExt }}, true))
      env:
        ENV_AIKEY: $(PROD_AIKEY)

    # build and package
    - script: |
        npm run compile
        vsce package
      displayName: Build and package VSIX

    # Generate manifest and publish artifacts
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generate Software Manifest'
      inputs:
        BuildDropPath: '.'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **/*.vsix
          **/_manifest/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop
        publishLocation: 'Container'

    - task: PowerShell@2
      condition: eq(${{ parameters.ghRelease }}, true)
      displayName: Scrape tag from package.json
      inputs:
        targetType: inline
        script: |
          $packageVersion = npm version | ConvertFrom-Json | Select-Object -ExpandProperty {azure-iot-toolkit}
          echo "##vso[task.setvariable variable=versionTag]v$packageVersion"

    # Publish release build on github (if parameter is set and commit tagged)
    - task: GitHubRelease@1
      condition: eq(${{ parameters.ghRelease }}, true)
      displayName: 'Publish release build on GitHub'
      inputs:
        gitHubConnection: $(GithubReleaseConnection)
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: userSpecifiedTag
        tag: $(versionTag)
        releaseNotesSource: 'inline'
        title: 'Release $(versionTag)'
        assets: '$(Build.ArtifactStagingDirectory)/**/*.vsix'
        isDraft: true
        isPreRelease: ${{ parameters.isPreRelease }}
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
    
    # Publish to marketplace (if parameter is set)
    - bash: vsce publish -p $MARKETPLACE_TOKEN --packagePath *.vsix
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
      displayName: Deploy releases to marketplace
      condition: and(succeeded(),  eq(${{ parameters.publishExt }}, true),  eq(${{ parameters.isPreRelease }}, false))
      env:
        MARKETPLACE_TOKEN: $(vsciot_marketplace_token)
      